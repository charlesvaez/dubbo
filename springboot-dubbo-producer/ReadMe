部署说明
1、本地安装docker

2、Docker服务端开放Remote API
    在Docker服务端：
    systemctl edit docker.service或者编辑vi /etc/systemd/system/docker.service.d/override.conf

          [Service]
          ExecStart=
          ExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375

    重新启动服务
     systemctl daemon-reload
     systemctl restart docker

    本地测试2375是否通
    curl http://localhost:2375/version

3、应用中集成Docker
     pom.xml
    <properties>
           <!--docker-->
           <dockerfile.maven.version>1.4.0</dockerfile.maven.version>
           <docker.image.prefix>dubbo</docker.image.prefix>
    </properties>

    <build>
            <plugins>
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${dockerfile.maven.version}</version>
                    <!--放开这块注释，则运行mvn deploy命令就会打包镜像<executions>-->
                    <!--<execution>-->
                    <!--<id>default</id>-->
                    <!--<goals>-->
                    <!--<goal>build</goal>-->
                    <!--<!–<goal>push</goal>–>-->
                    <!--</goals>-->
                    <!--</execution>-->
                    <!--</executions>-->
                    <configuration>
                        <repository>${docker.image.prefix}/${project.artifactId}</repository>
                        <buildArgs>
                            <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>
                    </configuration>
                </plugin>

            </plugins>
     </build>

     在项目根目录增加Dockerfile文件，内容如下
         #基于哪个镜像
         FROM java:8
         #指定维护者信息
         MAINTAINER hcx
         #将本地文件夹挂载到当前容器
         VOLUME /tmp
         #复制文件到容器
         ADD target/springboot-dubbo-producer.jar app.jar
         RUN sh -c 'touch /app.jar'
         ENV JAVA_OPTS=""
         EXPOSE 9091
         #配置容器启动后执行的命令
         ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

4、执行
      打包：mvn package -DskipTests

      ---配置环境变量 DOCKER_HOST=tcp://192.168.183.175:2375  （配置在JVM中，Run > Edit Configurations > Maven > Runner）
      发布镜像：mvn dockerfile:build

5、镜像运行
     提供者
     docker run -d -p 9091:9091 --name springboot-dubbo-producer --net=multi dubbo/springboot-dubbo-producer
     --docker exec -it a9fd31bd34a7 /bin/bash

     消费者
     docker run -d -p 9098:9098 --name springboot-dubbo-consumer --net=multi dubbo/springboot-dubbo-consumer
     docker exec container_id ip addr --查看ip
     docker logs -f -t --tail=100 container_id  --查看日志


     docker pull zookeeper
     docker run -d -p 2181:2181 -p 2888:2888 -p 3888:3888 -v /usr/local/zookeeper/zk1/data:/data -v /usr/local/zookeeper/zk1/datalog:/datalog -v /usr/local/zookeeper/zk1/logs:/logs --name zookeeper-3.4.13 --net=multi zookeeper


6、跨主机网络通信
    配置网络信息管理数据库，启动一个progrium/consul容器，并映射服务到本地8500端口
		$ docker run -d -p "8500:8500" -h "consul" progrium/consul -server -bootstrap

		-h 指定容器内的主机名为consul

		管理地址：http://192.168.183.175:8500

	配置docker主机，启动两台docker主机n1和n2，确保这两台主机之间可以通过ip地址互相访问，都能访问到数据库节点的8500端口
	分别修改/etc/docker/daemon.json文件，增加
	n1：
	"cluster-store":"consul://192.168.183.175:8500",
	"cluster-advertise":"192.168.183.175:2375"

	n2：
	"cluster-store":"consul://192.168.183.175:8500",
	"cluster-advertise":"192.168.183.177:2375"

	重启启动Docker服务器
	$sudo service docker restart

	创建网络
	在任意节点创建网络，网络名称为multi
	$ docker network create -d overlay multi

	创建成功后，可以同时在n1和n2查看到新的网络multi的信息
	n1主机
	$ docker network ls
	n2主机
	$ docker network ls

	查看网络的具体信息
	$ docker network inspect multi
